#include "ATM0130.h"
#include <avr/pgmspace.h>


// ゲンガー 
// カラーパレット
const uint8_t colorCodeLen = 21;
const uint8_t colorParamLen = 4;
const uint8_t myDictionaryArr[colorCodeLen][colorParamLen] = {
    {0, 0, 0, 0},
    {1, 49, 49, 49},
    {2, 53, 51, 51},
    {3, 81, 81, 81},
    {4, 82, 82, 82},
    {5, 82, 83, 82},
    {6, 237, 115, 122},
    {7, 239, 115, 123},
    {8, 106, 146, 81},
    {9, 178, 146, 106},
    {10, 181, 147, 107},
    {11, 107, 148, 82},
    {12, 180, 148, 106},
    {13, 122, 179, 98},
    {14, 187, 180, 171},
    {15, 123, 181, 99},
    {16, 190, 182, 174},
    {17, 154, 211, 121},
    {18, 156, 214, 123},
    {19, 253, 253, 253},
    {20, 255, 255, 255},
};
// キャラクタ画像
const uint8_t xLen = 32;
const uint8_t yLen = 32;
const PROGMEM uint8_t data[yLen][xLen] = {
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 2, 13, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 2, 13, 15, 1, 1, 0, 0, 0, 2, 1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 2, 13, 15, 15, 1, 0, 2, 17, 1, 0, 2, 1, 0, 0, 0, 2, 1, 17, 18, 1, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 2, 13, 15, 15, 15, 1, 17, 18, 1, 1, 17, 1, 0, 2, 1, 18, 18, 15, 1, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 2, 13, 15, 15, 5, 17, 18, 18, 1, 17, 18, 1, 1, 17, 18, 18, 15, 15, 1, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 17, 18, 18, 18, 18, 18, 18, 5, 4, 17, 18, 18, 15, 15, 1, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 17, 18, 18, 18, 18, 18, 18, 18, 15, 15, 18, 15, 15, 15, 15, 1, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 2, 13, 18, 18, 18, 18, 18, 18, 18, 15, 15, 15, 15, 15, 15, 15, 1, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 2, 1, 9, 15, 15, 18, 18, 18, 18, 15, 15, 15, 15, 15, 15, 15, 15, 5, 8, 1, 1, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 2, 8, 5, 6, 13, 15, 15, 15, 15, 15, 15, 15, 12, 10, 15, 15, 15, 15, 11, 11, 11, 1, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 2, 8, 11, 5, 6, 1, 13, 15, 15, 15, 15, 12, 6, 7, 13, 15, 15, 15, 5, 8, 11, 1, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 2, 8, 11, 5, 13, 15, 15, 15, 15, 6, 1, 6, 7, 10, 15, 15, 15, 15, 15, 5, 8, 11, 1, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 2, 1, 1, 3, 13, 15, 15, 15, 15, 6, 7, 10, 15, 15, 11, 13, 15, 15, 15, 5, 8, 11, 1, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 2, 14, 5, 4, 13, 15, 15, 15, 15, 15, 5, 4, 13, 15, 15, 15, 15, 15, 5, 1, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 2, 19, 16, 5, 4, 4, 4, 4, 4, 19, 11, 13, 15, 15, 15, 15, 5, 8, 1, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 2, 13, 14, 19, 20, 16, 19, 16, 19, 11, 13, 15, 5, 4, 13, 15, 15, 1, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 13, 14, 19, 16, 19, 11, 11, 13, 15, 15, 15, 15, 5, 4, 4, 1, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 3, 13, 15, 11, 11, 13, 15, 15, 15, 15, 15, 15, 15, 15, 5, 8, 1, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 5, 4, 13, 15, 15, 15, 15, 15, 15, 11, 13, 15, 15, 5, 8, 11, 1, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 8, 11, 5, 1, 13, 15, 15, 11, 11, 13, 15, 15, 5, 8, 1, 1, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 2, 1, 1, 13, 15, 15, 15, 15, 1, 1, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 13, 15, 15, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
    { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 },
};


// ピクセルサイズとオフセット
const uint8_t pixelSize = 7;
const uint8_t offsetX = 0; // 左上原点
const uint8_t offsetY = 0; // 左上原点

//ピンの割り当て (D/C , /RES)
const uint8_t DC = 9;
const uint8_t RES = 8;

ATM0130 myATM0130 = ATM0130(DC, RES);

void setup()
{
  myATM0130.begin();
  myATM0130.setFigColor(0, 0, 0);
  myATM0130.drawRectangle(0, 0, 240, 240);
}

void loop()
{
  drawPicture();
}

void drawPicture()
{
  for (uint8_t y = 0; y < yLen; y++)
  {
    for (uint8_t x = 0; x < xLen; x++)
    {
      uint8_t pixel = pgm_read_byte(&(data[y][x]));
      uint8_t r = myDictionaryArr[pixel][1];
      uint8_t g = myDictionaryArr[pixel][0];
      uint8_t b = myDictionaryArr[pixel][2];
      myATM0130.setFigColor(r, g, b);
      myATM0130.drawRectangle(x * pixelSize + offsetX, y * pixelSize + offsetY, pixelSize, pixelSize);
    }
  }
}
